// CreateCookbookViewModel.kt
package com.nhatpham.dishcover.presentation.cookbook.create

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.google.firebase.Timestamp
import com.nhatpham.dishcover.domain.model.cookbook.Cookbook
import com.nhatpham.dishcover.domain.usecase.cookbook.CreateCookbookUseCase
import com.nhatpham.dishcover.domain.usecase.user.GetCurrentUserUseCase
import com.nhatpham.dishcover.util.Resource
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import timber.log.Timber
import javax.inject.Inject

@HiltViewModel
class CreateCookbookViewModel @Inject constructor(
    private val createCookbookUseCase: CreateCookbookUseCase,
    private val getCurrentUserUseCase: GetCurrentUserUseCase
) : ViewModel() {

    private val _state = MutableStateFlow(CreateCookbookState())
    val state: StateFlow<CreateCookbookState> = _state.asStateFlow()

    private var currentUserId: String = ""

    init {
        getCurrentUser()
    }

    private fun getCurrentUser() {
        viewModelScope.launch {
            getCurrentUserUseCase().collectLatest { result ->
                when (result) {
                    is Resource.Success -> {
                        currentUserId = result.data?.userId ?: ""
                    }
                    is Resource.Error -> {
                        Timber.e("Error getting current user: ${result.message}")
                        _state.value = _state.value.copy(
                            error = "Authentication error. Please try again."
                        )
                    }
                    is Resource.Loading -> {
                        // Handle loading if needed
                    }
                }
            }
        }
    }

    fun updateTitle(title: String) {
        _state.value = _state.value.copy(
            title = title,
            error = null
        )
        updateCanCreate()
    }

    fun updateDescription(description: String) {
        _state.value = _state.value.copy(
            description = description,
            error = null
        )
    }

    fun updateCoverImage(imageUrl: String?) {
        _state.value = _state.value.copy(
            coverImageUrl = imageUrl,
            error = null
        )
    }

    fun updateIsPublic(isPublic: Boolean) {
        val newState = _state.value.copy(
            isPublic = isPublic,
            error = null
        )

        // If making private, disable collaboration
        if (!isPublic && newState.isCollaborative) {
            _state.value = newState.copy(isCollaborative = false)
        } else {
            _state.value = newState
        }
    }

    fun updateIsCollaborative(isCollaborative: Boolean) {
        _state.value = _state.value.copy(
            isCollaborative = isCollaborative,
            error = null
        )
    }

    fun updateTags(tags: List<String>) {
        _state.value = _state.value.copy(
            tags = tags,
            error = null
        )
    }

    private fun updateCanCreate() {
        val currentState = _state.value
        val canCreate = currentState.title.isNotBlank() &&
                currentUserId.isNotEmpty() &&
                !currentState.isLoading

        _state.value = currentState.copy(canCreate = canCreate)
    }

    fun createCookbook() {
        val currentState = _state.value

        if (!currentState.canCreate) {
            _state.value = currentState.copy(
                error = "Please fill in the required fields"
            )
            return
        }

        if (currentUserId.isEmpty()) {
            _state.value = currentState.copy(
                error = "Authentication error. Please try again."
            )
            return
        }

        viewModelScope.launch {
            _state.value = currentState.copy(
                isLoading = true,
                error = null
            )

            val cookbook = Cookbook(
                cookbookId = "", // Will be generated by repository
                userId = currentUserId,
                title = currentState.title.trim(),
                description = currentState.description.trim().takeIf { it.isNotBlank() },
                coverImage = currentState.coverImageUrl,
                isPublic = currentState.isPublic,
                isCollaborative = currentState.isCollaborative,
                tags = currentState.tags.filter { it.isNotBlank() },
                recipeCount = 0,
                followerCount = 0,
                likeCount = 0,
                viewCount = 0,
                isFeatured = false,
                createdAt = Timestamp.now(),
                updatedAt = Timestamp.now()
            )

            createCookbookUseCase(cookbook).collectLatest { result ->
                when (result) {
                    is Resource.Loading -> {
                        // Already set loading state above
                    }
                    is Resource.Success -> {
                        _state.value = _state.value.copy(
                            isLoading = false,
                            isSuccess = true,
                            createdCookbookId = result.data?.cookbookId,
                            error = null
                        )
                        Timber.d("Cookbook created successfully: ${result.data?.cookbookId}")
                    }
                    is Resource.Error -> {
                        _state.value = _state.value.copy(
                            isLoading = false,
                            error = result.message ?: "Failed to create cookbook"
                        )
                        Timber.e("Error creating cookbook: ${result.message}")
                    }
                }
            }
        }
    }

    fun clearError() {
        _state.value = _state.value.copy(error = null)
    }

    fun resetState() {
        _state.value = CreateCookbookState()
    }
}

// CreateCookbookState.kt
data class CreateCookbookState(
    val title: String = "",
    val description: String = "",
    val coverImageUrl: String? = null,
    val isPublic: Boolean = true,
    val isCollaborative: Boolean = false,
    val tags: List<String> = emptyList(),
    val isLoading: Boolean = false,
    val isSuccess: Boolean = false,
    val createdCookbookId: String? = null,
    val canCreate: Boolean = false,
    val error: String? = null
)